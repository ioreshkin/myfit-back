apiVersion: apps/v1
kind: Deployment
metadata:
  name: stage-myfit-back
  namespace: stage
  labels:
    app: stage-myfit-back
spec:
  replicas: 1
  strategy:
    type: "Recreate"
  selector:
    matchLabels:
      app: stage-myfit-back
  template:
    metadata:
      labels:
        app: stage-myfit-back
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/path: '/actuator/prometheus'
        prometheus.io/port: '8080'
    spec:
      containers:
        - name: stage-myfit-back
          image: "docker.fitcycle.ru/myfit:1.3-SNAPSHOT"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: 20
            timeoutSeconds: 10
            httpGet:
              path: /actuator/health
              port: http
          readinessProbe:
            initialDelaySeconds: 20
            timeoutSeconds: 10
            httpGet:
              path: /actuator/health
              port: http
          resources:
            limits:
              cpu: 1000m
              memory: 1000Mi
            requests:
              cpu: 500m
              memory: 500Mi
          env:
            - name: SWAGGER_ENABLE
              value: "true"
            - name: ISSUER_URI
              value: "https://auth.fitcycle.ru/realms/fitcycle-stage"
            - name: DB_URL
              value: "jdbc:postgresql://pg-app-stage:5432/postgres"
            - name: DB_USER
              valueFrom:
                configMapKeyRef:
                  name: pg-app-stage
                  key: postgres.user
            - name: DB_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: pg-app-stage
                  key: postgres.password
            - name: RABBIT_HOST
              value: "rabbit-0.rabbit.rabbit.svc.cluster.local"
            - name: RABBIT_PORT
              value: "5672"
            - name: RABBITMQ_DEFAULT_USER
              valueFrom:
                configMapKeyRef:
                  name: stage-myfit-back
                  key: rabbit.user
            - name: RABBITMQ_DEFAULT_PASS
              valueFrom:
                configMapKeyRef:
                  name: stage-myfit-back
                  key: rabbit.password
            - name: CORS_URL
              valueFrom:
                configMapKeyRef:
                  name: stage-myfit-back
                  key: cors.url
            - name: KEYCLOAK_URL
              valueFrom:
                configMapKeyRef:
                  name: stage-myfit-back
                  key: keycloak.url
            - name: KEYCLOAK_REALM
              valueFrom:
                configMapKeyRef:
                  name: stage-myfit-back
                  key: keycloak.realm
            - name: KEYCLOAK_USERNAME
              valueFrom:
                configMapKeyRef:
                  name: stage-myfit-back
                  key: keycloak.username
            - name: KEYCLOAK_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: stage-myfit-back
                  key: keycloak.password
            - name: KEYCLOAK_CLIENT_ID
              valueFrom:
                configMapKeyRef:
                  name: stage-myfit-back
                  key: keycloak.client-id
            - name: KEYCLOAK_EVENT_QUEUE
              valueFrom:
                configMapKeyRef:
                  name: stage-myfit-back
                  key: keycloak.queue
            - name: TUZ_USER
              valueFrom:
                configMapKeyRef:
                  name: stage-myfit-back
                  key: tuz.user
            - name: TUZ_PASSWORD
              valueFrom:
                configMapKeyRef:
                  name: stage-myfit-back
                  key: tuz.password
            - name: STAGE_NAME
              valueFrom:
                configMapKeyRef:
                  name: stage-myfit-back
                  key: stage.name
